name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12-dind
        options: --privileged

    env:
      DOCKER_IMAGE: "dungxbuns/vdt-lab-frontend"
      DOCKER_TLS_CERTDIR: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl jq python3-pip apt-transport-https ca-certificates gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Fetch current tags from Docker Hub
        id: get-tags
        run: |
          TAGS=$(curl -s -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" "https://hub.docker.com/v2/repositories/${{ env.DOCKER_IMAGE }}/tags" | jq '.count')
          echo "::set-output name=tags::$TAGS"

      - name: Calculate new tag
        id: new-tag
        run: echo "::set-output name=new_tag::v$(( ${{ steps.get-tags.outputs.tags }} + 1 ))"

      - name: Build and push Docker image
        run: |
          NEW_TAG="${{ steps.new-tag.outputs.new_tag }}"
          docker build --platform linux/arm64 -t ${{ env.DOCKER_IMAGE }}:$NEW_TAG .
          docker push ${{ env.DOCKER_IMAGE }}:$NEW_TAG
          echo "NEW_TAG=$NEW_TAG" > .env
        env:
          NEW_TAG: ${{ steps.new-tag.outputs.new_tag }}

      - name: Upload .env file
        uses: actions/upload-artifact@v2
        with:
          name: dotenv
          path: .env

  deploy:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download .env file
        uses: actions/download-artifact@v2
        with:
          name: dotenv
          path: .env

      - name: Export environment variables
        run: export $(cat .env | xargs)

      - name: Clone ks8-config-web repository
        run: git clone https://github.com/dungbun31/ks8-config-web.git

      - name: Navigate to repository
        run: cd ks8-config-web

      - name: Install Python dependencies
        run: pip3 install -r requirements.txt

      - name: Run config script
        run: python3 config.py

      - name: Configure git
        run: |
          git config --global user.email "gitlab-ci@your-domain.com"
          git config --global user.name "GitLab CI"

      - name: Commit and push changes
        run: |
          git add values.yaml
          git commit -m "Update image tag to ${{ env.NEW_TAG }}"
          git push
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
